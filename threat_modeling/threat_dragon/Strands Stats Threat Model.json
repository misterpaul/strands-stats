{
  "version": "2.0.0",
  "summary": {
    "title": "Strands Stats Threat Model",
    "owner": "Paul Faulstich",
    "description": "Threat model for the Strands Stats application, which processes game results from user emails and displays them in a web app.",
    "id": 1
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "Backend Data Pipeline",
        "thumbnail": "./public/content/images/thumbnail.stride.jpg",
        "id": 0,
        "version": "2.0.0",
        "diagramType": "STRIDE",
        "cells": [
          {
            "shape": "tm.Actor",
            "size": { "width": 160, "height": 80 },
            "position": { "x": 50, "y": 250 },
            "angle": 0,
            "id": "a1b2c3d4-e5f6-4a7b-8c9d-0a1b2c3d4e5f",
            "zIndex": 1,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Game Player" } },
            "threats": [
              {
                "threatId": "a1b1c1d1-e1f1-4a1b-8c1d-1a1b1c1d1e1f",
                "number": 1,
                "title": "Cost-based Denial of Service via Email Flooding",
                "status": "Open",
                "severity": "High",
                "type": "Denial of Service",
                "description": "A compromised or malicious allowed sender (or a successful spoofer) sends a large volume of emails in a short period. This triggers a corresponding number of Apps Script executions, GCS writes, and Cloud Function invocations, leading to unexpected high costs. This is the highest-priority risk for the project.",
                "mitigation": "The current `ALLOWED_SENDERS` list is a partial mitigation. A stronger mitigation is to implement rate-limiting in the Apps Script (e.g., check a Firestore collection for the last submission time for that user, and only allow one email per user per day). GCP Billing Budgets and alerts should be configured in OpenTofu as a critical guardrail."
              },
              {
                "threatId": "d4e4f4a4-b4c4-4d4e-9f4a-4d4e4f4a4b4c",
                "number": 4,
                "title": "Email Sender Spoofing",
                "status": "Open",
                "severity": "Medium",
                "type": "Spoofing",
                "description": "An attacker spoofs the `From:` address of an email to appear as if it came from a user on the `ALLOWED_SENDERS` list. This allows them to inject invalid or malicious data into the Firestore database, bypassing the primary sender validation check in the Apps Script.",
                "mitigation": "This is partially mitigated by modern email standards like SPF, DKIM, and DMARC, which Gmail uses to identify potential spoofing. The application implicitly relies on Gmail's filtering. For a low-risk project, this may be an acceptable risk. A stronger mitigation would involve a challenge-response mechanism (e.g., user must click a link in a reply email), but this adds significant complexity."
              }
            ]
          },
          {
            "shape": "tm.Process",
            "size": { "width": 100, "height": 100 },
            "position": { "x": 280, "y": 240 },
            "angle": 0,
            "id": "b2c3d4e5-f6a7-4b8c-9d0e-1b2c3d4e5f6a",
            "zIndex": 2,
            "attrs": { "text": { "text": "Gmail Service" } },
            "threats": []
          },
          {
            "shape": "tm.Process",
            "size": { "width": 100, "height": 100 },
            "position": { "x": 450, "y": 150 },
            "angle": 0,
            "id": "c3d4e5f6-a7b8-4c9d-0e1f-2c3d4e5f6a7b",
            "zIndex": 3,
            "attrs": { "text": { "text": "Apps Script\n(Email Forwarder)" } },
            "threats": []
          },
          {
            "shape": "tm.Store",
            "size": { "width": 160, "height": 80 },
            "position": { "x": 420, "y": 350 },
            "angle": 0,
            "id": "d4e5f6a7-b8c9-4d0e-1f2a-3d4e5f6a7b8c",
            "zIndex": 4,
            "attrs": { "text": { "text": "GCS Bucket\n(Incoming Emails)" } },
            "threats": [
              {
                "threatId": "e5f5a5b5-c5d5-4e5f-8a5b-5e5f5a5b5c5d",
                "number": 5,
                "title": "Insecure GCS Bucket Permissions",
                "status": "Mitigated",
                "severity": "Low",
                "type": "Information Disclosure",
                "description": "A manual misconfiguration in the GCP console could lead to one of the GCS buckets being made public, exposing raw user emails containing PII.",
                "mitigation": "This is well-mitigated by the project's use of Infrastructure as Code. The OpenTofu configuration explicitly sets `public_access_prevention = \"enforced\"` on all buckets. Managing infrastructure via code significantly reduces the risk of manual error and configuration drift."
              }
            ]
          },
          {
            "shape": "tm.Process",
            "size": { "width": 100, "height": 100 },
            "position": { "x": 650, "y": 240 },
            "angle": 0,
            "id": "e5f6a7b8-c9d0-4e1f-2a3b-4e5f6a7b8c9d",
            "zIndex": 5,
            "attrs": { "text": { "text": "Cloud Function\n(Data Parser)" } },
            "threats": [
              {
                "threatId": "c3d3e3f3-a3b3-4c3d-8e3f-3c3d3e3f3a3b",
                "number": 3,
                "title": "Malformed Email Causes Repeated Function Failures",
                "status": "Mitigated",
                "severity": "Medium",
                "type": "Denial of Service",
                "description": "An attacker sends a specially crafted email (a \"poison pill\") that the `mailparser` library or the custom regex cannot handle, causing the Cloud Function to throw an unhandled exception. The Eventarc trigger's retry policy would cause the function to re-execute on the same file, consuming resources and potentially blocking the processing of valid emails.",
                "mitigation": "The current architecture correctly mitigates this. The Cloud Function's main logic is wrapped in a `try...catch` block. On failure, the `catch` block calls the `archiveFile` function to move the problematic file to a dedicated `failures` bucket. This isolates the poison pill and allows other messages to be processed."
              },
              {
                "threatId": "f6a6b6c6-d6e6-4f6a-9b6c-6f6a6b6c6d6e",
                "number": 6,
                "title": "Elevation of Privilege via Cloud Function",
                "status": "Open",
                "severity": "Low",
                "type": "Elevation of Privilege",
                "description": "A vulnerability in a third-party Node.js package (e.g., `mailparser`) or the custom parsing logic could potentially be exploited. If an attacker can achieve remote code execution, they would gain the permissions of the function's service account, allowing them to read/write to GCS and Firestore.",
                "mitigation": "The risk is lowered by using a dedicated, least-privilege service account for the function. Regularly update dependencies (`npm audit`, Dependabot) to patch known vulnerabilities. The parsing logic should be treated as untrusted input and be as simple as possible. Avoid dangerous functions like `eval()`."
              }
            ]
          },
          {
            "shape": "tm.Store",
            "size": { "width": 160, "height": 80 },
            "position": { "x": 820, "y": 250 },
            "angle": 0,
            "id": "f6a7b8c9-d0e1-4f2a-3b4c-5f6a7b8c9d0e",
            "zIndex": 6,
            "attrs": { "text": { "text": "Firestore DB\n(Game Data)" } },
            "threats": [
              {
                "threatId": "b2c2d2e2-f2a2-4b2c-9d2e-2b2c2d2e2f2a",
                "number": 2,
                "title": "Unauthorized Data Access via Weak Firestore Rules",
                "status": "Open",
                "severity": "High",
                "type": "Information Disclosure",
                "description": "If the planned web application is deployed without strong Firestore security rules, an unauthenticated or malicious user could potentially read, modify, or delete data belonging to other users by crafting direct API requests to the Firestore backend.",
                "mitigation": "Implement and enforce Firestore Security Rules that restrict data access based on the authenticated user's UID. For example: `allow read: if request.auth.uid == resource.data.userId;`. These rules must be developed and deployed via the Firebase CLI before the web app goes live."
              }
            ]
          },
          {
            "shape": "tm.Flow",
            "source": { "id": "a1b2c3d4-e5f6-4a7b-8c9d-0a1b2c3d4e5f" },
            "target": { "id": "b2c3d4e5-f6a7-4b8c-9d0e-1b2c3d4e5f6a" },
            "vertices": [],
            "id": "1c8a7a8a-8b8b-4c8c-9d8d-1a2b3c4d5e6f",
            "zIndex": 7,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Sends Email (SMTP)" } },
            "threats": []
          },
          {
            "shape": "tm.Flow",
            "source": { "id": "b2c3d4e5-f6a7-4b8c-9d0e-1b2c3d4e5f6a" },
            "target": { "id": "c3d4e5f6-a7b8-4c9d-0e1f-2c3d4e5f6a7b" },
            "vertices": [],
            "id": "2d9b8b9b-9c9c-4d9d-8e9e-2b3c4d5e6f7a",
            "zIndex": 8,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Reads Email (Gmail API)" } },
            "threats": []
          },
          {
            "shape": "tm.Flow",
            "source": { "id": "c3d4e5f6-a7b8-4c9d-0e1f-2c3d4e5f6a7b" },
            "target": { "id": "d4e5f6a7-b8c9-4d0e-1f2a-3d4e5f6a7b8c" },
            "vertices": [],
            "id": "3e0c9c0c-0d0d-4e0e-9f0f-3c4d5e6f7a8b",
            "zIndex": 9,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Writes .eml file (GCS API)" } },
            "threats": []
          },
          {
            "shape": "tm.Flow",
            "source": { "id": "d4e5f6a7-b8c9-4d0e-1f2a-3d4e5f6a7b8c" },
            "target": { "id": "e5f6a7b8-c9d0-4e1f-2a3b-4e5f6a7b8c9d" },
            "vertices": [],
            "id": "4f1d0d1d-1e1e-4f1f-8a1a-4d5e6f7a8b9c",
            "zIndex": 10,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Triggers Function (Eventarc)" } },
            "threats": []
          },
          {
            "shape": "tm.Flow",
            "source": { "id": "e5f6a7b8-c9d0-4e1f-2a3b-4e5f6a7b8c9d" },
            "target": { "id": "f6a7b8c9-d0e1-4f2a-3b4c-5f6a7b8c9d0e" },
            "vertices": [],
            "id": "5a2e1e2e-2f2f-4a2a-9b2b-5e6f7a8b9c0d",
            "zIndex": 11,
            "attrs": { ".marker-target": { "d": "M 10 0 L 0 5 L 10 10 z" }, "text": { "text": "Writes Game Data (Firestore API)" } },
            "threats": []
          }
        ]
      }
    ],
    "diagramTop": 1,
    "threatTop": 6,
    "reviewer": ""
  }
}